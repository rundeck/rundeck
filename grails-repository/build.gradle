buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
    }
}

plugins {
    id "org.springframework.boot" version "${springBootVersion}"
}

group "repository"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-gsp"
apply plugin: "java-library"

apply from: "../gradle/java-version.gradle"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://jitpack.io" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    api{
        exclude group: "org.bouncycastle", module: "bcpg-jdk15on"
        exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation("org.grails:grails-core") {
        exclude(group:"org.yaml",module:"snakeyaml")
    }

    implementation "org.codehaus.groovy:groovy-dateutil:${groovyVersion}"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:gsp"
    implementation "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    implementation project(":core")
    api ("com.github.rundeck.repository:repository-client:0.12.0") {
        exclude(group:"org.rundeck", module:"rundeck-core")
        exclude(group:"org.rundeck", module:"rundeck-storage-api")
        exclude(group:"org.rundeck", module:"rundeck-storage-data")
        exclude(group:"org.rundeck", module:"rundeck-storage-filesys")
        exclude(group:"com.squareup.okhttp3", module:"okhttp")
        exclude(group:"javax.mail", module:"mailapi")
        exclude(group:"org.codehaus.groovy", module:"groovy-all")
        exclude(group: 'ch.qos.logback', module: 'logback-classic')
    }

    implementation "org.yaml:snakeyaml:${snakeyamlVersion}"

    profile ("org.grails.profiles:web-plugin"){
        exclude(group:"org.grails.profiles",module:"web")
    }
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:$assetPluginVersion"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "cglib:cglib:2.2"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}


tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false
bootRun.enabled = false