plugins {
  id "com.moowork.node"
  id 'base'
}

configurations{
  lib
  packages
}

node{
    download = project.hasProperty('node.install')
    version = project.hasProperty('node.install') ? project.getProperty('node.install') : null
}

task runNpmBuild(type: NpmTask, group: 'build') {
    inputs.file 'package.json'
    inputs.file 'package-lock.json'
    inputs.file 'vue.config.js'
    inputs.file 'tsconfig.json'

    inputs.dir 'src'

    outputs.dir(file("$buildDir"))
    outputs.cacheIf { true }

    def npmCommand = System.env.CI ?
      'ci:build' :
      'dev:build'

    args = ['run', npmCommand]
}


def runNpmPack = tasks.register('runNpmPack', NpmTask) {
    it.group 'build'
    it.dependsOn runNpmBuild

    it.inputs.dir 'lib'
    it.inputs.dir 'theme'
    it.inputs.dir 'theme-next'
    it.inputs.dir '.storybook'

    it.outputs.dir("build")
    it.outputs.cacheIf { true }

    args = ['pack']

    it.doLast {
        copy {
            from './'
            into 'build'
            include '*.tgz'
        }
    }
}

def runNpmVersion = tasks.register('runNpmVersion', NpmTask) {
    dependsOn runNpmPack

    args = [ 'version' ]

    if (project.environment == 'release') {
        if (project.vTag == 'GA')
            args << "${project.vNum}".toString()
        else
            args << "${project.vNum}-${project.vTag}.${new Date().getTime()}".toString()
    }
    else {
        args << "${project.vNum}-snapshot.${new Date().getTime()}".toString()
    }
}

tasks.register('runNpmPublish', NpmTask) {
    dependsOn runNpmVersion

    args = ['publish', '--dry-run']

    if (project.environment != 'release') {
        args += ['--tag', 'snapshot']
    }
}

assemble.dependsOn runNpmBuild

artifacts {
  lib(file: file(buildDir), name: "${project.name}", type: 'directory', builtBy: runNpmBuild)
  packages(file: file("$projectDir/build"), builtBy: runNpmPack)
}
