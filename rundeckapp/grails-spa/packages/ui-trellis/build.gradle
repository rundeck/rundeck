plugins {
  id "com.moowork.node"
  id 'base'
}

configurations{
  lib
  packages
}

node{
    download = project.hasProperty('node.install')
    version = project.hasProperty('node.install') ? project.getProperty('node.install') : null
}

def sourceDirs = [
        '.storybook',
        'lib',
        'src',
        'theme',
        'theme-next'
]
def sourceFiles = ['package.json', 'README.md']
def sources = sourceDirs + sourceFiles

def runNpmBuild = tasks.register('runNpmBuild', NpmTask) {
    it.inputs.file 'package.json'
    it.inputs.file 'package-lock.json'
    it.inputs.file 'vue.config.js'
    it.inputs.file 'tsconfig.json'

    it.inputs.dir 'src'

    it.outputs.dir(file("$buildDir"))
    it.outputs.cacheIf { true }

    def npmCommand = System.env.CI ?
      'ci:build' :
      'dev:build'

    args = ['run', npmCommand]
}

/** Takes package.json and sets the version in it */
def runNpmVersion = tasks.register('runNpmVersion', NpmTask) {t ->
    t.dependsOn runNpmBuild

    sourceDirs.each {t.inputs.dir it }
    t.inputs.files sourceFiles
    t.outputs.dir 'build/pack-version'
    t.outputs.cacheIf {true}

    args = [ 'version' ]

    if (findProperty('environment')?:'development' == 'release') {
        if (project.vTag == 'GA')
            args << "${project.vNum}".toString()
        else
            args << "${project.vNum}-${project.vTag}.${new Date().getTime()}".toString()
    }
    else {
        args << "${project.vNum}-snapshot.${new Date().getTime()}".toString()
    }

    /** Copy to staging location where we will modify it */
    t.doFirst {
        copy {
            from 'package.json'
            into 'build/pack-version'
        }
    }

    t.execOverrides {
        it.workingDir = 'build/pack-version'
    }
}

/** Gather all the build bits together for publishing or packing */
def stagePackage = tasks.register('stagePackage') {t ->
    t.dependsOn runNpmVersion

    sourceDirs.each {t.inputs.dir it }
    t.inputs.files sourceFiles
    t.outputs.dir 'build/pack'
    t.outputs.cacheIf {true}

    t.doFirst {
        project.delete('build/pack')
    }

    t.doLast {
        sourceDirs.each { source ->
            copy {
                from source
                into "build/pack/${source}"
            }
        }
        sourceFiles.each {source ->
            copy {
                from source
                into 'build/pack'
            }
        }
        copy {
            from 'build/pack-version/package.json'
            into 'build/pack'
        }
    }
}

/** Creates a tarball package and copies to an output location */
def runNpmPack = tasks.register('runNpmPack', NpmTask) {
    it.group 'build'
    it.dependsOn stagePackage

    it.inputs.dir 'build/pack'

    it.outputs.dir("build/package")
    it.outputs.cacheIf { true }

    args = ['pack']

    it.execOverrides {
        it.workingDir = 'build/pack'
    }

    it.doFirst {
        project.delete('build/package')
    }

    it.doLast {
        copy {
            from 'build/pack'
            into 'build/package'
            include '*.tgz'
            rename '(.+).tgz', 'rundeck-ui-trellis.tgz'
        }
        /** Keeps the output dir pristine for Gradle caching */
        project.delete fileTree('build/pack').matching {
            include '*.tgz'
        }
    }
}

tasks.register('runNpmPublish', NpmTask) {t ->
    t.dependsOn stagePackage

    def dryRun = (findProperty('dryRun') as String ?: 'true').toBoolean()

    args = ['publish', '--dry-run']

    if (!dryRun)
        args = args - '--dry-run'

    if (project.environment != 'release') {
        args += ['--tag', 'snapshot']
    }

    t.execOverrides {
        it.workingDir = 'build/pack'
    }
}

assemble.dependsOn runNpmBuild

artifacts {
  lib(file: file(buildDir), name: "${project.name}", type: 'directory', builtBy: runNpmBuild)
  packages(file: file("$projectDir/build/package/rundeck-ui-trellis.tgz"), type: 'file', builtBy: runNpmPack)
}
