import java.io.File;
import java.util.Map;

import org.gradle.api.Project;
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction

/**
 * The Rundeck webapp build file
 * 
 * It's important to note that grails has it's own build system based on Gant. Rather
 * than trying to integrate Gradle directly with Gant or use one of the Gradle-Grails plugins
 * available, we're following in the steps of the Make based build and just wrapping 
 * around the Grails builds.
 */

description = 'The Rundeck Grails webapp project'

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'

// set the convention to rundeck:<branch>:<path>:<projectName>
eclipse.project.name =  "${project.getParent().eclipse.project.name}:webapp"

// Properties for downloading, installing and running Grails
def grailsBaseName = "grails-${grailsVersion}"
def grailsZipFile = "${grailsBaseName}.zip"
def grailsZipFileDefaultBasePath = "${rootProject.buildDir}/tmp"
def boolean grailsZipFileBasePathOverriden = hasProperty("grailsZipFileBasePath")
def grailsZipFileBasePath = grailsZipFileBasePathOverriden ? grailsZipFileBasePath : grailsZipFileDefaultBasePath
def grailsZipFileLocation = "${grailsZipFileBasePath}/${grailsZipFile}"
def grailsInstallLocation = "${rootProject.buildDir}/local"
def grailsDownloadUrl = "http://dist.springframework.org.s3.amazonaws.com/release/GRAILS/grails-${grailsVersion}.zip"
def grailsHome = "${grailsInstallLocation}/${grailsBaseName}"
def grailsCommandLine = "${grailsHome}/bin/grails"
def warFileLocation = "${project.projectDir}/target/rundeck-${version}.war"

/**
 * Depend on core 
 */
dependencies {
	compile project(":core")
}

repositories {
	mavenLocal()
	mavenCentral()
}

/**
 * Downloads Grails from the SpringSource archives
 */
task downloadGrails {
	File grailsArchive = file(grailsZipFileLocation);
	outputs.file grailsArchive;
	doLast {
		if (grailsZipFileBasePathOverriden) {
			logger.warn("Using existing Grails zip file: ${grailsZipFileLocation}");
			if (!grailsArchive.isFile()) {
				throw new InvalidUserDataException("Grails zip file does not exist: ${grailsZipFileLocation}");
			}
		} else {
			logger.warn("Downloading ${grailsBaseName}...");
			file("${grailsZipFileBasePath}").mkdirs();
			ant.get(src: grailsDownloadUrl, dest: grailsZipFileLocation, verbose: true);
		}
	}
}

/**
 * Expand the downloaded archive if it hasn't already been expanded
 */
task extractGrails(dependsOn: downloadGrails) {
	
	logger.debug("grailsZipFileLocation: ${grailsZipFileLocation}")
	inputs.file file(grailsZipFileLocation);
	
	logger.debug("grailsInstallLocation: ${grailsInstallLocation}")
	outputs.dir file(grailsHome);
	
	doLast {
		logger.info("Extracting ${grailsZipFile}...")
		file(grailsInstallLocation).mkdirs();
		copy {
			from zipTree(grailsZipFileLocation);
			into file(grailsInstallLocation);
		}
		// make sure that everything but the .bat files are set +x on linux / macs
		if (System.getProperty('os.name').toLowerCase().indexOf('win') < 0) {
			FileTree tree = fileTree("${grailsInstallLocation}/${grailsBaseName}/bin").exclude('**/*.bat');
			tree.each { File file ->
				logger.info('Setting +x permission on ' + file);
				file.setExecutable(true);
			}
		}
	}
}

/**
 * "core" needs to be built and installed into the local ~/.m2 repo before 
 * we attempt to do anything further with Grails. 
 */
task installDependencies(dependsOn: [project(":core").install]) << {
	description = "Builds and installs dependencies on other subprojects"
}

/**
 * Installs the jetty-plugin into the .grails folder
 */
task installJettyPlugin(type: Exec, dependsOn: [extractGrails]) {

	def jettyPluginZip = "${rootDir}/dependencies/grails-jetty/zips/grails-jetty-1.2-SNAPSHOT.zip"
	def jettyPluginInstalled = "${System.properties['user.home']}/.grails/${grailsVersion}/projects/rundeckapp/plugins/jetty-1.2-SNAPSHOT"
	
	inputs.source file(jettyPluginZip)
	outputs.dir file(jettyPluginInstalled)
	
	workingDir project.projectDir
	environment 'GRAILS_HOME', grailsHome
	commandLine grailsCommandLine
	args 'install-plugin', jettyPluginZip
}

task cleanWar(type: Delete) {
	delete file(warFileLocation), file("${project.projectDir}/target")
}
task grailsClean(type: Exec, dependsOn: [extractGrails]) {
    ignoreExitValue=true
	workingDir project.projectDir
	environment 'GRAILS_HOME', grailsHome
	commandLine grailsCommandLine
	args 'clean'
}
grailsClean.enabled = new File(grailsCommandLine).exists()

task clean(overwrite: true, dependsOn: [cleanWar, grailsClean]) {
}

/**
 * Wrapper task for grails test-app
 */
task testGrails(type: Exec, overwrite: true, dependsOn: [installJettyPlugin, installDependencies,extractGrails]) {

	workingDir project.projectDir
	environment 'GRAILS_HOME', grailsHome
	commandLine grailsCommandLine
	args 'test-app','-coverage','-xml'
}
test.dependsOn testGrails

/**
 * Sets the value of app.version under application.properties
 */
task replaceVersion(type: PropertyValueUpdater) {
	propertyFile = file("${projectDir.path}/application.properties")
	propertiesMap = [ 'app.version' : project.version ]
}
			
/**
 * Builds the rundeck war file
 */
task grailsWar(type: Exec, overwrite:true, dependsOn: [replaceVersion,installJettyPlugin, installDependencies,extractGrails]) {
	inputs.sourceDir file("${projectDir}/src")
	outputs.file file(warFileLocation)
	workingDir project.projectDir
	environment 'GRAILS_HOME', grailsHome
	commandLine grailsCommandLine
	args 'prod','war'
}

// add the war to default configuration for this project
artifacts{
	'default'(file(warFileLocation)){
        name 'rundeck'
        type 'war'
        builtBy grailsWar
	}
}

task build(overwrite: true, dependsOn: [test, grailsWar]) {
	// noop build because this isn't actually a java project 
	// besides the war task is handling building by issuing a "grails war" 
}

/**
 * Installs the war file into the ~/.m2 maven repo 
 */
task install(type: Exec, overwrite: true, dependsOn: grailsWar) {
	inputs.file file(warFileLocation)
	workingDir project.projectDir
	commandLine grailsCommandLine
	args 'maven-install'
}

/**
 * Does an "in-place" substitution of a property value without having to using placeholders
 * 
 * @author jburbridge
 */
class PropertyValueUpdater extends DefaultTask {

	@OutputFile
	File propertyFile
	
	@Input
	Map propertiesMap
	
	@TaskAction
	def void replaceContents() {
		
		if (propertyFile.isFile() && propertyFile.exists()) {
			
			def newLines = []
			propertyFile.readLines().each { line ->
				
				logger.debug("${this} processing line: ${line}")
				// match the key and the value, but skip comments 
				def matcher = line =~ /^#{0}\s*([\w\.].*)\s*\=\s*(.*)$/
				// if there's a match and we have a property value, replace it 
				if (matcher.size() != 0 && matcher[0] != null && matcher[0].size() > 1) {
					newLines.add((propertiesMap[matcher[0][1]] != null) ?
						"${matcher[0][1]}=${propertiesMap[matcher[0][1]]}" : line)
				// if we don't find a match, just add the line back as-is
				} else {
					newLines.add(line)
				}
			}
			
			propertyFile.write(newLines.join("\n"))
			logger.warn("Wrote file: ${propertyFile}")
			
		} else {
			throw new TaskExecutionException(this, new RuntimeException("Could not find property file ${propertyFile}!"))
		}
	}
}

