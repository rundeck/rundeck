import java.io.File;
import java.util.Map;

import org.gradle.api.Project;
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import org.gradle.plugins.signing.Sign

import java.util.jar.JarInputStream

/**
 * The Rundeck webapp build file
 * 
 * It's important to note that grails has it's own build system based on Gant. Rather
 * than trying to integrate Gradle directly with Gant or use one of the Gradle-Grails plugins
 * available, we're following in the steps of the Make based build and just wrapping 
 * around the Grails builds.
 */

description = 'The Rundeck Grails webapp project'

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

// set the convention to rundeck:<branch>:<path>:<projectName>
eclipse.project.name =  "${project.getParent().eclipse.project.name}:webapp"

// Properties for downloading, installing and running Grails
def grailsBaseName = "grails-${grailsVersion}"
def grailsZipFile = "${grailsBaseName}.zip"
def grailsZipFileDefaultBasePath = "${rootProject.projectDir}/local/tmp"
def boolean grailsZipFileBasePathOverriden = hasProperty("grailsZipFileBasePath")
def grailsZipFileBasePath = grailsZipFileBasePathOverriden ? grailsZipFileBasePath : grailsZipFileDefaultBasePath
def grailsZipFileLocation = "${grailsZipFileBasePath}/${grailsZipFile}"
def grailsInstallLocation = "${rootProject.projectDir}/local"
def grailsLocalRepo = hasProperty('grailsLocalRepo') ? grailsLocalRepo : 'grails-app/plugins'
def grailsCentral = hasProperty('disableGrailsCentral') && disableGrailsCentral=='true' ? "-Ddisable.grails.central=${disableGrailsCentral}" : "-Dgrails.central.url=${grailsCentralUrl}"
def grailsDownloadUrl = "http://dist.springframework.org.s3.amazonaws.com/release/GRAILS/grails-${grailsVersion}.zip"
def grailsHome = "${grailsInstallLocation}/${grailsBaseName}"
def grailsCommandLine = "${grailsHome}/bin/grails"
def mavenCredsDefined = hasProperty('mavenUser') && hasProperty('mavenPassword') && hasProperty('mavenRealm') && hasProperty('mavenHost')
def mavenCreds = mavenCredsDefined ? "-Dmaven.user=${mavenUser} -Dmaven.password=${mavenPassword} -Dmaven.realm=${mavenRealm} -Dmaven.host=${mavenHost}" : ''
def warFileName = "rundeck-${version}.war"
def warFileLocation = "${project.projectDir}/target/${warFileName}"
def additionalFileLocation = "${project.projectDir}/target/war-contents"

configurations{
    pluginFiles {
        transitive = false

    }
    pluginFiles.extendsFrom(runtime)
}

dependencies {
    pluginFiles project(':plugins:script-plugin'),
            project(':plugins:stub-plugin'),
            project(':plugins:localexec-plugin'),
            project(':plugins:copyfile-plugin'),
            project(':plugins:job-state-plugin'),
            project(':plugins:flow-control-plugin'),
            project(':plugins:jasypt-encryption-plugin'),
            project(':plugins:orchestrator-plugin'),
            project(':plugins:git-plugin')
}

task copyPluginLibs(dependsOn: configurations.pluginFiles)<< {
    File libextDir = new File(additionalFileLocation, "WEB-INF/rundeck/plugins")
    File manifestFile = new File(additionalFileLocation, "WEB-INF/rundeck/plugins/manifest.properties")

    def filelist=[]
    libextDir.mkdirs()
    configurations.pluginFiles.files.each { pluginFile ->
        copy {
            from pluginFile
            into libextDir
        }
        filelist << pluginFile.name
        //load jar manifest
        def pluginProps = [:]

        pluginFile.withInputStream {
            def jarmf=new JarInputStream(it).manifest
            jarmf.getMainAttributes().findAll{it.key.toString().startsWith('Rundeck-Plugin')}.each{k,v->
                pluginProps[k.toString()]=v
            }
        }
        def f= pluginFile.name
        Properties fileProps = new Properties()
        fileProps[  'plugin.name']= pluginProps['Rundeck-Plugin-Name']?:f
        fileProps[  'plugin.description']= pluginProps['Rundeck-Plugin-Description'] ?:'Rundeck bundled plugin'
        fileProps[  'plugin.author']= pluginProps['Rundeck-Plugin-Author'] ?:'SimplifyOps, Inc.'
        fileProps[  'plugin.version']= pluginProps['Rundeck-Plugin-File-Version'] ?:version
        fileProps[  'plugin.url']= pluginProps['Rundeck-Plugin-URL'] ?:'http://rundeck.org'
        fileProps[  'plugin.date']= pluginProps['Rundeck-Plugin-BuildDate'] ?:(new Date().toString())
        fileProps[  'plugin.filename']= f

        //write properties file
        new File(libextDir,pluginFile.name+'.properties').withOutputStream {
            fileProps.store(it,"generated manifest")
        }
    }
    Properties manifestProps = new Properties()
    manifestProps['pluginFileList'] = (filelist.join(','))
    manifestFile.withWriter { w ->
        manifestProps.store(w,"generated manifest")
    }
}
/**
 * Downloads Grails from the SpringSource archives
 */
task downloadGrails {
    File grailsArchive = file(grailsZipFileLocation);
    outputs.file grailsArchive;
    doLast {
        if (grailsZipFileBasePathOverriden) {
            logger.warn("Using existing Grails zip file: ${grailsZipFileLocation}");
            if (!grailsArchive.isFile()) {
                throw new InvalidUserDataException("Grails zip file does not exist: ${grailsZipFileLocation}");
            }
        } else {
            logger.warn("Downloading ${grailsBaseName}...");
            file("${grailsZipFileBasePath}").mkdirs();
            if (!grailsArchive.isFile()) {
                ant.get(src: grailsDownloadUrl, dest: grailsZipFileLocation, verbose: true);
            }
        }
    }
}

/**
 * Expand the downloaded archive if it hasn't already been expanded
 */
task extractGrails(dependsOn: downloadGrails) {
    logger.debug("grailsZipFileLocation: ${grailsZipFileLocation}")
    inputs.file file(grailsZipFileLocation);

    logger.debug("grailsInstallLocation: ${grailsInstallLocation}")
    outputs.dir file(grailsHome);

    doLast {
        logger.info("Extracting ${grailsZipFile}...")
        file(grailsInstallLocation).mkdirs();
        copy {
            from zipTree(grailsZipFileLocation);
            into file(grailsInstallLocation);
        }
        // make sure that everything but the .bat files are set +x on linux / macs
        if (System.getProperty('os.name').toLowerCase().indexOf('win') < 0) {
            FileTree tree = fileTree("${grailsInstallLocation}/${grailsBaseName}/bin").exclude('**/*.bat');
            tree.each { File file ->
                logger.info('Setting +x permission on ' + file);
                file.setExecutable(true);
            }
        }
    }
}

def projDeps = [
        ":core",
        ":rundeck-storage:rundeck-storage-api",
        ":rundeck-storage:rundeck-storage-data",
        ":rundeck-storage:rundeck-storage-filesys",
        ":rundeck-storage:rundeck-storage-conf",
        ":rundeck-launcher:rundeck-jetty-server"
].collect{
    project(it).install
}
/**
 * "core" needs to be built and installed into the local ~/.m2 repo before
 * we attempt to do anything further with Grails.
 */
task installDependencies(dependsOn: projDeps) << {
    description = "Builds and installs dependencies on other subprojects"
}

/**
 * Installs the jetty-plugin into the .grails folder

task installJettyPlugin(type: Exec, dependsOn: [extractGrails]) {
    def jettyPluginVersion = '2.0.3'
    def jettyPluginInstalled = "${System.properties['user.home']}/.grails/${grailsVersion}/projects/rundeckapp/plugins/jetty-${jettyPluginVersion}"
    
    inputs.dir file(grailsHome)
    outputs.dir file(jettyPluginInstalled)

    workingDir project.projectDir
    environment 'GRAILS_HOME', grailsHome
    commandLine grailsCommandLine
    args "-Dmaven.central.url=${mavenCentralUrl}",
            "${mavenCreds}",
            "${grailsCentral}",
            "-Dgrails.local.repo=${grailsLocalRepo}",
            "-DRUNDECK_VERSION=${version}",
            'install-plugin',
            'jetty',
            jettyPluginVersion
}

 */

task cleanWar(type: Delete) {
    delete file(warFileLocation), file("${project.projectDir}/target")
}

task cleanGrails(type: Exec, dependsOn: [extractGrails]) {
    inputs.dir file(grailsHome)
    ignoreExitValue=true
    workingDir project.projectDir
    environment 'GRAILS_HOME', grailsHome
    commandLine grailsCommandLine
    args "-Dmaven.central.url=${mavenCentralUrl}",
            "${mavenCreds}",
            "${grailsCentral}",
            "-Dgrails.local.repo=${grailsLocalRepo}",
            "-DRUNDECK_VERSION=${version}", 'clean'
}

task clean(overwrite: true, dependsOn: [cleanEclipse, cleanWar, cleanGrails]) {
}

/**
 * Wrapper task for grails test-app
 */
task testGrails(type: Exec, overwrite: true, dependsOn: [ installDependencies, extractGrails]) {
    inputs.dir file(grailsHome)
    workingDir project.projectDir
    environment 'GRAILS_HOME', grailsHome
    commandLine grailsCommandLine
    def rdbase=new File(temporaryDir,'rdeck_base')
    rdbase.mkdirs()
    args "-Dmaven.central.url=${mavenCentralUrl}",
            "${mavenCreds}",
            "${grailsCentral}",
            "-Dgrails.local.repo=${grailsLocalRepo}",
            "-DRUNDECK_VERSION=${version}",
            "-Drdeck.base=${rdbase}",
            'test-app'
}
test.dependsOn testGrails

/**
 * Run grails compile
 */
task grailsCompile(type: Exec, overwrite: true, dependsOn: [extractGrails]) {
    inputs.dir file(grailsHome)
    workingDir project.projectDir
    environment 'GRAILS_HOME', grailsHome
    commandLine grailsCommandLine
    args "-Dmaven.central.url=${mavenCentralUrl}",
            "${mavenCreds}",
            "${grailsCentral}",
            "-Dgrails.local.repo=${grailsLocalRepo}",
            "-DRUNDECK_VERSION=${version}",
            'prod',
            'compile'
}
/**
 * Builds the rundeck war file
 */
task grailsWar(type: Exec, overwrite:true, dependsOn: [ installDependencies,extractGrails, copyPluginLibs]) {
    inputs.dir file(grailsHome)
    inputs.sourceDir file("${projectDir}/src")
    outputs.file file(warFileLocation)
    workingDir project.projectDir
    environment 'GRAILS_HOME', grailsHome
    commandLine grailsCommandLine
    args "-Dmaven.central.url=${mavenCentralUrl}",
            "${mavenCreds}",
            "${grailsCentral}",
            "-Dgrails.local.repo=${grailsLocalRepo}",
            "-Drundeck.war.additional=${additionalFileLocation}",
            "-DRUNDECK_VERSION=${version}",
            'prod',
            'war',
            '--non-interactive',
            warFileLocation
}

// add the war to default configuration for this project
artifacts{
    'default'(file(warFileLocation)){
        name 'rundeck'
        type 'war'
        builtBy grailsWar
    }
}

task build(overwrite: true, dependsOn: [test, grailsWar]) {
    // noop build because this isn't actually a java project
    // besides the war task is handling building by issuing a "grails war"
}


//********* artifact signing *********
if(isReleaseBuild && project.hasProperty("signing.keyId")) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}

//build a pom we reuse for both maven builds and release to sonatype
def deploypom=pom {
    project {
        artifactId archivesBaseName
        groupId project.group
        inceptionYear '2011'
        packaging 'war'
        version version
        name "Rundeck Web app"
        description "Rundeck web console for command dispatching and job scheduling"
        url 'http://rundeck.org'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        properties{
            'version'(version)
        }
        scm {
            url 'https://github.com/dtolabs/rundeck'
            connection 'scm:git:git@github.com/dtolabs/rundeck.git'
            developerConnection 'scm:git:git@github.com:dtolabs/rundeck.git'
        }
        developers {
          developer {
            id('gschueler')
            name('Greg Schueler')
            email('greg@dtosolutions.com')
          }
        }
        parent {
            groupId('org.sonatype.oss')
            artifactId('oss-parent')
            version('7')
        }
    }
}
// prompt for PGP key passphrase if not set
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign } && project.hasProperty("signing.keyId") && !project.hasProperty("signing.password") && !isDevBuild) {
        // Use Java 6's console to read from the console (no good for a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"

        //def id = console.readLine("PGP Key Id: ")
        //def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
        def password = console.readPassword("PGP Private Key Password: ")

        //allprojects { ext."signing.keyId" = id }
        //allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

uploadArchives {
    if(isDevBuild){
        repositories{
            repositories.mavenDeployer {
                configuration = configurations.archives
                pom=deploypom
            }
        }
    }else{
        repositories.mavenDeployer {
            if(isReleaseBuild){
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
 
            configuration = configurations.archives
            if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')){
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }
            pom=deploypom
        }
    }
}
