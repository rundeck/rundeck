import java.util.jar.JarInputStream
import java.util.regex.Matcher

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "gradle.plugin.com.energizedwork:idea-gradle-plugins:1.4"
        classpath "org.grails.plugins:hibernate5:7.0.0"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPluginVersion"
        classpath("org.grails.plugins:database-migration:$dbMigrationPluginVersion"){
            exclude group: 'org.spockframework', module: 'spock-core'
        }
    }
}
plugins {
    id "org.springframework.boot" version "${springBootVersion}"
    id "org.dvaske.gradle.git-build-info"
    id "com.github.node-gradle.node" version "7.0.1"
    id "java-library"
    id "war"
}

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin: "com.energizedwork.idea-base"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin: "maven-publish"
apply plugin: "signing"

allprojects {
    ext["liquibase.version"] = liquibaseVersion
}

//list of grails plugins to depend on in various ways
ext.coreGrailsPlugins = [
    ':grails-metricsweb',
    ':grails-persistlocale',
    ':grails-securityheaders',
    ':grails-repository',
    ':grails-webhooks',
    ':grails-execution-mode-timer',
    ':grails-rundeck-data-shared',
    ':grails-job-kill-handler'
]

if(!project.findProperty('isRunning')) {
    //for openapi spec generation, make gradle
    //evaluate each grails plugin to define the
    //apiSpecFiles configurations, before we depend on them.
    //however, it seems to interfere with proper
    //behavior when running "bootRun", so skip it in that case

    //force gradle configuration of core grails plugins
    coreGrailsPlugins.each{
        project.evaluationDependsOn(it)
    }
    //force gradle configuration of extra grails plugins
    project.findProperty('extraGrailsPlugins')?.each{
        project.evaluationDependsOn(it)
    }
}

configurations {
    agent
    war{}
    bootWar{}
    pluginFiles {
        transitive = false
    }
    apiSpecFiles
    spa //dependency on grails-spa
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }

    implementation.exclude module: "spring-boot-starter-tomcat"
    implementation.exclude module: "spring-boot-cli"

    //avoid error request.XML
    implementation.exclude group: 'pull-parser'

}

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://jitpack.io" }
}
sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}
dependencies {
    //Rundeck plugin dependencies
    pluginFiles project.findProperty('bundledPlugins')?:[]

    testImplementation group: 'com.squareup.retrofit2', name: 'retrofit-mock', version: '2.9.0'

    spa project(path: ':rundeckapp:grails-spa', configuration: 'spa')

    // Rundeck project dependencies.
    implementation project(':core')
    implementation project(':rundeck-storage:rundeck-storage-filesys')
    implementation project(':rundeck-app-util')


    /** It's important that the configuration addition follow the form 'compile project("")'
     * so the Gradle magic happens. Other forms(ie 'compile proj' or 'compile project(proj)'
     * can produce broken plugins in development mode. */
    for(proj in project.findProperty('bundledGrailsPlugins')) {
        logger.info("Injecting Grails plugin ${proj}")
        implementation project("$proj")
    }

    //api spec file dependencies from extra grails plugins
    for(proj in project.findProperty('extraGrailsPlugins')) {
        if(project("$proj").configurations.findByName('apiSpecFiles')) {
            apiSpecFiles project(path: proj, configuration: 'apiSpecFiles')
        }
    }
    //api spec file dependencies from core grails plugins
    for(proj in project.findProperty('coreGrailsPlugins')) {
        if(project("$proj").configurations.findByName('apiSpecFiles')) {
            apiSpecFiles project(path: proj, configuration: 'apiSpecFiles')
        }
    }

    // From BuildConfig.groovy.
    implementation 'org.quartz-scheduler:quartz:2.3.2'
    implementation 'org.grails.plugins:quartz:2.0.13'
    implementation 'org.grails.plugins:mail:3.0.0'

    implementation 'org.springframework.cloud:spring-cloud-context:3.1.6'

    //enable greenmail plugin below for testing email behavior
    // https://github.com/gpc/greenmail
    //compile 'org.grails.plugins:greenmail:2.0.0.RC2'

    implementation 'com.atlassian.commonmark:commonmark:0.11.0'
    implementation 'com.atlassian.commonmark:commonmark-ext-gfm-tables:0.10.0'
    implementation ('com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20211018.2'){
        exclude(group:'com.google.guava',module:'guava')
    }
    implementation 'org.owasp.encoder:encoder:1.2.1'
    implementation 'org.grails.plugins:external-config:2.0.0'
    implementation 'commons-fileupload:commons-fileupload:1.5'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation "commons-codec:commons-codec:${commonsCodecVersion}"

    implementation "org.yaml:snakeyaml:${snakeyamlVersion}"

    // Defined by create-app
    implementation "org.grails.plugins:hibernate5"
    implementation "org.hibernate:hibernate-core:${hibernateVersion}"

    implementation( "org.hibernate:hibernate-jcache:${hibernateVersion}")
    implementation('org.ehcache:ehcache:3.8.1')

    implementation ('org.hibernate:hibernate-validator:6.2.0.Final')
    implementation ('org.hibernate.validator:hibernate-validator:6.2.0.Final')

    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    implementation "org.springframework.boot:spring-boot-autoconfigure"

    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"

    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }

    implementation ("org.springframework.boot:spring-boot-starter-jetty") {
        exclude(group:'org.eclipse.jetty.websocket',module:'websocket-server')
        exclude(group:'org.eclipse.jetty.websocket',module:'javax-websocket-server-impl')
    }

    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation 'org.grails.plugins:grails-executor:0.4'
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:gsp"
    implementation "org.grails:grails-codecs"
    implementation "org.grails.plugins:cache"
    implementation "io.micronaut:micronaut-inject-groovy"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${jacksonDataformatCBORVersion}"
    implementation "org.eclipse.jetty:jetty-jaas"
    implementation "org.eclipse.jetty:jetty-jmx"
    implementation "org.eclipse.jetty:jetty-util"
    implementation "org.eclipse.jetty:jetty-security"
    implementation ("org.grails.plugins:spring-security-core:${grailsSpringSecurityVersion}"){
        exclude(group:'net.sf.ehcache',module:'ehcache')
    }
    implementation 'org.kohsuke:libpam4j:1.11'
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    implementation 'org.dom4j:dom4j:2.1.3'
    implementation ("org.bouncycastle:bcprov-jdk15on:${bouncyCastleVersion}")
    implementation ("org.bouncycastle:bcpg-jdk15on:${bouncyCastleVersion}")
    implementation ("org.grails:grails-console") {
        exclude(group:"org.yaml",module:"snakeyaml")
    }
    implementation "org.grails.plugins:database-migration:${dbMigrationPluginVersion}"
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: "${httpClientVersion}"
    profile ("org.grails.profiles:web"){
        exclude(group:"org.grails.profiles",module:"web")
    }

    implementation ("com.jayway.jsonpath:json-path:2.8.0"){
        exclude group:"org.slf4j",module:"slf4j-api"
        exclude group:'org.ow2.asm', module: 'asm'
    }

    implementation ("net.minidev:json-smart:2.4.10")
    
    // OpenApi Dependencies
    compileOnly "io.swagger.core.v3:swagger-annotations:${swaggerVersion}"
    compileOnly("io.micronaut.openapi:micronaut-openapi:${micronautOpenapiVersion}") {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
    }
    implementation "io.micronaut:micronaut-http-server:${micronautVersion}"
    implementation "io.micronaut:micronaut-inject:${micronautVersion}"
    implementation "io.micronaut:micronaut-inject-java:${micronautVersion}"
    implementation "io.micronaut:micronaut-inject-groovy:${micronautVersion}"
    implementation "io.micronaut:micronaut-core:${micronautVersion}"

    runtimeOnly 'org.aspectj:aspectjweaver:1.9.7'

    // Database drivers
    runtimeOnly "com.h2database:h2:2.2.220"
    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc:9.4.0.jre8'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:2.7.0'
    runtimeOnly 'org.postgresql:postgresql:42.7.2'
    runtimeOnly 'org.rundeck.hibernate:rundeck-oracle-dialect:1.0.0'

    runtimeOnly "org.apache.tomcat:tomcat-jdbc:9.0.89"
    runtimeOnly "org.springframework:spring-jcl:${springVersion}"
    runtimeOnly "org.codehaus.groovy:groovy-dateutil:${groovyVersion}"
    api ("com.bertramlabs.plugins:asset-pipeline-grails:$assetPluginVersion")
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:$assetPluginVersion"

    implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails:grails-test-mixins:3.3.0.RC1"
    testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"
    testImplementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    testImplementation( "org.hibernate:hibernate-jcache:${hibernateVersion}")

    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-remote-driver"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-api"
    testRuntimeOnly 'org.jetbrains.kotlin:kotlin-stdlib:1.3.70'
    testRuntimeOnly 'org.aspectj:aspectjweaver:1.9.7'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    // transitive dependencies constraints.
    constraints {
        implementation("com.mchange:c3p0:0.9.5.4") {
            because "version brought by quartz affected by CVE-2019-5427"
        }
        implementation ("org.bouncycastle:bcprov-jdk15on:${bouncyCastleVersion}") {
            because "earlier versions affected by exploitable bugs"
        }
        implementation ("org.bouncycastle:bcpg-jdk15on:${bouncyCastleVersion}") {
            because "earlier versions affected by exploitable bugs"
        }
        implementation ("org.yaml:snakeyaml:${snakeyamlVersion}") {
            because "required by rundeck:repository"
        }
    }



}
grails{
    plugins{
        coreGrailsPlugins.each {
            implementation project(it)
        }

        /** It's important that the configuration addition follow the form 'compile project("")'
         * so the Gradle magic happens. Other forms(ie 'compile proj' or 'compile project(proj)'
         * can produce broken plugins in development mode. */
        for(proj in project.findProperty('bundledGrailsPlugins')) {
            logger.info("Injecting Grails plugin ${proj}")
            implementation project("$proj")
        }
    }
    pathingJar = true
}

task copyRuntimeLibs(type: Copy) {
    from configurations.pluginFiles
    into "${projectDir}/rundeck-runtime/libext"
}

bootRun {
    dependencies{
        coreGrailsPlugins.each{
            implementation project(it)
        }
    }
    dependsOn 'copySpa', copyRuntimeLibs, 'vendorAssetDeps'
    main 'rundeckapp.Application'
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx2048m')
    systemProperties(System.properties)
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
    systemProperty "build.ident", project.version
    sourceResources sourceSets.main
    //    addResources = true
    System.setProperty("logRoot",System.getProperty("rdeck.base",System.getProperty("user.dir")+"/rundeck-runtime"))
    systemProperty "rundeck.server.logDir", System.getProperty("logRoot")+"/server/logs"
}


tasks.register('copyApiSpecFiles', Copy){
    description 'Copy openapi spec files from each grails plugin dependency into a common dir'
    def additionalSpecDir = file("${buildDir}/openapi")
    doFirst {
        additionalSpecDir.mkdirs()
    }
    outputs.dir additionalSpecDir
    inputs.files configurations.apiSpecFiles
    from configurations.apiSpecFiles
    into additionalSpecDir
}

tasks.withType(GroovyCompile).configureEach {
    def additionalSpecDir = new File(project.buildDir, 'openapi')
    def opts=[
        '-Xmx1024m'
    ]
    if(!project.findProperty('isRunning')) {
        dependsOn copyApiSpecFiles
        opts.addAll([
            '-Dmicronaut.openapi.filename=rundeck-api',
            "-Dmicronaut.openapi.additional.files=${additionalSpecDir.absolutePath}".toString()
        ])
    }else{
        opts.add('-Dmicronaut.openapi.enabled=false')
    }
    configure(groovyOptions) {
        forkOptions.jvmArgs = opts
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(Test).configureEach {
    forkEvery = 500
}

// To make Spring boot bootWar task work, we need to declare the duplicateStrategy explicitly
tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

assets {
    minifyJs = false
    minifyCss = false
    excludes = ['gulpfile.js','**/*~','*.json','bootstrap/**/*.less', '_package-manager/**/*']
}

project.gradle.projectsEvaluated {
    buildProperties.doLast {
        File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }
        if (!grailsBuildInfoFile) return
        Properties properties = new Properties()

        grailsBuildInfoFile.withInputStream {
            properties.load(it)
        }

        properties.setProperty("build.ident", properties.getProperty("info.app.version"))
        properties.setProperty("core.version", properties.getProperty("info.app.version"))

        if (project.gitDescribeInfo) {
            properties.setProperty("build.core.git.description", project.gitDescribeInfo)
        }
        if (project.gitCommit) {
            properties.setProperty("build.core.git.commit", project.gitCommit)
        }
        if (project.gitBranch) {
            properties.setProperty("build.core.git.branch", project.gitBranch)
        }

        grailsBuildInfoFile.withOutputStream {
            properties.store(it, null)
        }
    }
}

task('copyPluginLibs').dependsOn(configurations.pluginFiles).doLast {
    println "copying plugin libs"
    File libextDir = new File(buildDir, "WEB-INF/rundeck/plugins")
    File manifestFile = new File(buildDir, "WEB-INF/rundeck/plugins/manifest.properties")

    def filelist=[]
    libextDir.mkdirs()
    configurations.pluginFiles.files.each { pluginFile ->
        project.logger.info("Bundling libExt plugin ${pluginFile.name}")


        copy {
            from pluginFile
            into libextDir
        }
        filelist << pluginFile.name

        /** Mangle JAR plugin properties **/
        if ( ['.jar','.zip'].contains(pluginFile.name[-4..-1]) ) {
            def pluginProps = [:]
            pluginFile.withInputStream {
                def jarmf = new JarInputStream(it).manifest
                jarmf.getMainAttributes().findAll { it.key.toString().startsWith('Rundeck-Plugin') }.each { k, v ->
                    pluginProps[k.toString()] = v
                }
            }
            def f = pluginFile.name
            Properties fileProps = new Properties()
            fileProps['plugin.name'] = pluginProps['Rundeck-Plugin-Name'] ?: f
            fileProps['plugin.description'] = pluginProps['Rundeck-Plugin-Description'] ?: 'Rundeck bundled plugin'
            fileProps['plugin.author'] = pluginProps['Rundeck-Plugin-Author'] ?: 'Rundeck, Inc.'
            fileProps['plugin.version'] = pluginProps['Rundeck-Plugin-File-Version'] ?: version
            fileProps['plugin.url'] = pluginProps['Rundeck-Plugin-URL'] ?: 'http://rundeck.com'
            fileProps['plugin.date'] = pluginProps['Rundeck-Plugin-BuildDate'] ?: (new Date().toString())
            fileProps['plugin.filename'] = f

            //write properties file
            new File(libextDir, pluginFile.name + '.properties').withOutputStream {
                fileProps.store(it, "generated manifest")
            }
        }
    }
    Properties manifestProps = new Properties()
    manifestProps['pluginFileList'] = (filelist.join(','))
    manifestFile.withWriter { w ->
        manifestProps.store(w,"generated manifest")
    }
}

task copySpa(type: Copy) {
    from( configurations.spa){
        include('provided/**')
    }
    into "$projectDir/grails-app/assets"
    outputs.dir "$projectDir/grails-app/assets/provided"
}
assetPluginPackage.dependsOn copySpa
assetCompile.dependsOn copySpa

task vendorAssetDeps(type: NpmTask) { it ->
    dependsOn copySpa
    def baseDir = "${projectDir}/grails-app/assets/javascripts"

    it.inputs.file "${baseDir}/_package-manager/package.json"
    it.inputs.file "${baseDir}/_package-manager/package-lock.json"
    it.inputs.file "${baseDir}/_package-manager/webpack.mix.js"

    it.outputs.dir "${baseDir}/vendor"

    def npmCommand = System.env.CI ?
            'ci:build' :
            'dev:build'

    it.args = ['run', npmCommand]

    execOverrides {
        it.workingDir = "${baseDir}/_package-manager"
    }
}

assetPluginPackage.dependsOn vendorAssetDeps
assetCompile.dependsOn vendorAssetDeps

archivesBaseName = 'rundeck'

tasks.withType(War).configureEach { War war ->
    war.dependsOn compileGroovyPages
}

bootWar {
    enabled=true
    it.dependsOn copyPluginLibs

    from("${buildDir}/WEB-INF/rundeck/plugins") {
        into("WEB-INF/rundeck/plugins")
    }
    from("templates") {
        into("templates")
    }
    manifest {
        attributes(
            ['Add-Opens':'java.management/com.sun.jmx.mbeanserver java.base/java.io java.base/java.lang java.base/java.lang.invoke java.base/java.lang.reflect java.management/java.lang.management java.management/sun.management java.base/java.math java.base/java.net java.base/java.nio.charset java.base/java.nio.file java.base/java.nio.file.attribute java.base/java.security java.base/java.text java.base/java.time java.base/java.time.chrono java.base/java.util java.base/java.util.zip java.base/java.util.concurrent java.base/java.util.concurrent.atomic java.base/java.util.stream java.base/java.util.function java.logging/java.util.logging java.base/java.util.regex java.base/javax.crypto java.base/javax.security.auth java.base/javax.security.auth.login java.base/java.security.cert java.base/sun.nio.cs java.base/sun.nio.fs java.base/sun.security.util java.base/sun.net.www.protocol.jar java.xml/org.xml.sax java.xml/com.sun.org.apache.xerces.internal.impl java.xml/com.sun.org.apache.xerces.internal.dom java.sql/java.sql']
        )
    }
}

artifacts {
    war war
    bootWar bootWar
}

//install.dependsOn assemble
def signArchives = project.tasks.findByName('signArchives')
if (signArchives) {
    bootWar.dependsOn(war)
    signArchives.dependsOn(bootWar)
}

clean {
    delete "$projectDir/grails-app/assets/provided"
    delete "${rootProject.buildDir}/gitbuildinfo/rundeck"
    delete "$projectDir/grails-app/assets/javascripts/vendor"
}

tasks.withType(GenerateMavenPom).all {
    doLast {
        File file
        if(project.name == "rundeckapp"){
            file = new File("$buildDir/publications/rundeck/pom-default.xml")
        }
        else if (project.name == "core") {
            file = new File("$buildDir/publications/rundeck-core/pom-default.xml")
        }
        else{
            file = new File("$buildDir/publications/${project.name}/pom-default.xml")
        }
        def text = file.text
        def pattern = "(?s)(<dependencyManagement>.+?<dependencies>)(.+?)(</dependencies>.+?</dependencyManagement>)"
        Matcher matcher = text =~ pattern
        if (matcher.find()) {
            text = text.replaceFirst(pattern, "")
            def firstDeps = matcher.group(2)
            text = text.replaceFirst(pattern, '$1$2' + firstDeps + '$3')
        }
        file.write(text)
    }
}

publishing {
    publications {
        "rundeck"(MavenPublication) {
            artifactId = "rundeck"
            groupId = project.group
            artifact bootWar
            version = version
            pom {
                 name = "Rundeck library Rundeck"
                 description = project.description?:'Rundeck'
                 url = 'http://rundeck.org'
                 licenses {
                     license {
                         name = 'The Apache Software License, Version 2.0'
                         url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                         distribution = 'repo'
                     }
                 }
                 developers {
                     developer {
                         id = 'gschueler'
                         name = 'Greg Schueler'
                         email = 'greg@rundeck.com'
                     }
                 }
                 scm {
                     connection = 'scm:git:git@github.com/rundeck/rundeck.git'
                     developerConnection = 'scm:git:git@github.com:rundeck/rundeck.git'
                     url = 'https://github.com/rundeck/rundeck'
                 }
             }
        }
    }
    repositories {
         maven {
             // change URLs to point to your repos, e.g. http://my.org/repo
             def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
             def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
             url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
             credentials {
                 username findProperty('sonatypeUsername')
                 password findProperty('sonatypePassword')
             }
         }
     }
}

apply from: "${rootDir}/gradle/java.gradle"
apply from: "../gradle/java-version.gradle"


if (project.hasProperty('signing.keyId') && project.hasProperty('signing.password')) {
    signing {
        sign(publishing.publications)
    }
}

