/**
 * The Rundeck Core API build file
 **/

description = 'The Rundeck Core API project'

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign

apply from: "${rootDir}/gradle/java.gradle"
apply plugin: 'signing'

archivesBaseName = 'rundeck-core'
defaultTasks 'clean','assemble'

dependencies {
    compile 'org.apache.ant:ant:1.7.1',
        'log4j:log4j:1.2.16',
        'commons-codec:commons-codec:1.5',
        'commons-beanutils:commons-beanutils:1.8.0',
        'commons-collections:commons-collections:3.2.1',
        'commons-logging:commons-logging:1.1.1',
        'commons-lang:commons-lang:2.4',
        'dom4j:dom4j:1.6.1',
        'commons-cli:commons-cli:1.0',
        'org.apache.ant:ant-jsch:1.7.1',
        'com.jcraft:jsch:0.1.50',
        'org.yaml:snakeyaml:1.9',
        'xerces:xercesImpl:2.6.2',
        'xml-apis:xml-apis:2.0.2' 
    
    compile ('jaxen:jaxen:1.1') {
        // Remove xerces apis as that should be provided by jdk 
        exclude group: 'xerces', module: 'xmlParserAPIs'
        exclude group: 'xml-apis', module: 'xml-apis'
        exclude group: 'xalan', module: 'xalan'
    }
    compile ('commons-httpclient:commons-httpclient:3.0.1') {
        exclude group:'junit', module: 'junit'
    }
    testCompile 'junit:junit:4.8.1',
        'org.mockito:mockito-all:1.8.5'
}

def rundeckToolsDependencies = configurations.runtime.files.collect { "$it.name" }.join(" ")

jar {
    manifest {
        attributes 'Rundeck-Version': version, 
                   'Rundeck-Tools-Dependencies': rundeckToolsDependencies
    }
}

test{
    systemProperties 'rdeck.base': "$projectDir/build/rdeck_base"
    systemProperties 'rdeck.home': "$projectDir/build"
}

task expandTemplate << {
    ant.delete(file:"$projectDir/src/main/resources/META-INF/com/dtolabs/rundeck/core/application.properties")
    copy{
        expand('version':version,'version_build':buildNum,'version_ident':version+'-'+buildNum)
        from "$projectDir/src/main/meta/com/dtolabs/rundeck/core/application.properties"
        into "$projectDir/src/main/resources/META-INF/com/dtolabs/rundeck/core/"
    }   
}

compileJava.dependsOn expandTemplate

assemble {
    doLast{
        //copy libs to a tools lib dir
        ant.mkdir(dir:"$projectDir/build/tools/lib")
        configurations.runtime.files.each { file ->
            copy{
                from file
                into "$projectDir/build/tools/lib"
            }
        }
    }
}

// make sure that we've rebuilt and assembled before install
install.dependsOn(build)

//********* artifact signing *********
if(isReleaseBuild && project.hasProperty("signing.keyId")) {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives {
        // do nothing
    }
}

//build a pom we reuse for both maven builds and release to sonatype
def buildpom=pom {
    project {
        artifactId archivesBaseName
        groupId project.group
        inceptionYear '2011'
        packaging 'jar'
        version version
        name "Rundeck Core"
        description "Core library for the Rundeck web console for command dispatching and job scheduling"
        url 'http://rundeck.org'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        properties{
            'version'(version)
            'version_build'(buildNum)
            'version_ident'(version+'-'+buildNum)
        }
        scm {
            url 'https://github.com/dtolabs/rundeck'
            connection 'scm:git:git@github.com/dtolabs/rundeck.git'
            developerConnection 'scm:git:git@github.com:dtolabs/rundeck.git'
        }
        developers {
          developer {
            id('gschueler')
            name('Greg Schueler')
            email('greg@dtosolutions.com')
          }
        }
        parent {
            groupId('org.sonatype.oss')
            artifactId('oss-parent')
            version('7')
        }
        build {
            resources{
                resource{
                    directory 'src/main/meta'
                    targetPath 'META-INF'
                    filtering=true
                }
                resource{
                    directory 'src/main/resources'
                }
            }
            plugins{
                plugin() {
                  groupId('org.apache.maven.plugins')
                  artifactId('maven-source-plugin')
                  executions() {
                    execution() {
                      id('attach-sources')
                      goals() {
                        goal('jar')
                      }
                    }
                  }
                }
                plugin() {
                  groupId('org.apache.maven.plugins')
                  artifactId('maven-javadoc-plugin')
                  version('2.8')
                  configuration() {
                    docletArtifact() {
                      groupId('com.google.doclava')
                      artifactId('doclava')
                      version('1.0.3')
                    }
                    doclet('com.google.doclava.Doclava')
                    /* bootclasspath required by Sun's JVM */
                    bootclasspath('${sun.boot.class.path}')
                    additionalparam('''-quiet
                             -federate JDK http://download.oracle.com/javase/6/docs/api/index.html?
                             -federationxml JDK http://doclava.googlecode.com/svn/static/api/openjdk-6.xml
                             -hdf project.name "${project.name}"
                             -d .
                             -hide 101
                             -proofread ./proof-read.txt''')
                    useStandardDocletOptions('false')
                    /* Apple's JVM sometimes requires more memory */
                    additionalJOption('-J-Xmx1024m')
                  }
                  executions() {
                    execution() {
                      id('attach-javadoc')
                      goals() {
                        goal('jar')
                      }
                    }
                  }
                }
                plugin{
                    groupId 'org.apache.maven.plugins'
                    artifactId 'maven-compiler-plugin'
                    version '2.3.2'
                    configuration{
                        'source'('1.5')
                        'target'('1.5')
                    }
                }
                plugin{
                    groupId 'org.apache.maven.plugins'
                    artifactId 'maven-surefire-plugin'
                    version '2.10'
                    configuration{
                        systemPropertyVariables{
                            'rdeck.base'('${project.build.directory}/rdeck_base')
                        }
                        redirectTestOutputToFile 'true'
                    }
                }
                plugin{
                    groupId 'org.apache.maven.plugins'
                    artifactId 'maven-jar-plugin'
                    version '2.3.2'
                    configuration{
                        archive{
                          manifestEntries{
                            'Rundeck-Version'(version)
                            'Rundeck-Tools-Dependencies'(rundeckToolsDependencies)
                          }
                        }
                    }
                }
            }
        }
    }
}

task createPom << {
    buildpom.writeTo("pom.xml")
}


// prompt for PGP key passphrase if not set
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign } && project.hasProperty("signing.keyId") && !project.hasProperty("signing.password") && !isDevBuild) {
        // Use Java 6's console to read from the console (no good for a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"

        //def id = console.readLine("PGP Key Id: ")
        //def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
        def password = console.readPassword("PGP Private Key Password: ")

        //allprojects { ext."signing.keyId" = id }
        //allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

uploadArchives {
    if(isDevBuild){
        repositories{
            repositories.mavenDeployer {
                configuration = configurations.archives
                pom=buildpom
            }
        }
    }else{
        repositories.mavenDeployer {
            if(isReleaseBuild){
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
 
            configuration = configurations.archives
            if(project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')){
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }
            pom=buildpom
        }
    }
}
