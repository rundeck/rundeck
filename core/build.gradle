/**
 * The Rundeck Core API build file
 **/

description = 'The Rundeck Core API project'

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign

apply from: "${rootDir}/gradle/java.gradle"

archivesBaseName = 'rundeck-core'
defaultTasks 'clean','assemble'

def isReleaseBuild
def isSnapshotBuild
def isDevBuild

if(hasProperty("release")){
    isReleaseBuild=true
}else if(hasProperty("snapshot")){
    isSnapshotBuild=true
    version=version.split('-')[0]+ '-SNAPSHOT'
}else{
    isDevBuild=true
}

repositories {
    mavenCentral()
    add(new org.apache.ivy.plugins.resolver.FileSystemResolver()) {
        name = 'localdeps'
        //addIvyPattern "$projectDir/../dependencies/[organisation]/[module]-ivy-[revision].xml"
        addArtifactPattern "$projectDir/../dependencies/[module]/[ext]s/[module]-[revision](-[classifier]).[ext]"
        descriptor = 'optional'
        checkmodified = true
    }
}

dependencies {
    compile( 
        [group: 'org.apache.ant', name: 'ant', version: '1.7.1',ext:'jar'],
        [group: 'org.apache.ant', name: 'ant-launcher', version: '1.7.1',ext:'jar'],
        [group: 'log4j', name: 'log4j', version: '1.2.16',ext:'jar'],
        [group: 'commons-codec', name: 'commons-codec', version: '1.5',ext:'jar'],
        [group: 'commons-httpclient', name: 'commons-httpclient', version: '3.0.1',ext:'jar'],
        [group: 'commons-beanutils', name: 'commons-beanutils', version: '1.8.0',ext:'jar'],
        [group: 'commons-collections', name: 'commons-collections', version: '3.2.1',ext:'jar'],
        [group: 'commons-logging', name: 'commons-logging', version: '1.1',ext:'jar'],
        [group: 'commons-lang', name: 'commons-lang', version: '2.4',ext:'jar'],
        [group: 'xerces', name: 'xercesImpl', version: '2.6.0',ext:'jar'],
        [group: 'dom4j', name: 'dom4j', version: '1.6.1',ext:'jar'],
        [group: 'jaxen', name: 'jaxen', version: '1.1',ext:'jar'],
        [group: 'commons-cli', name: 'commons-cli', version: '1.0',ext:'jar'],
        [group: 'org.apache.ant', name: 'ant-jsch', version: '1.7.1',ext:'jar'],
        [group: 'com.jcraft', name: 'jsch', version: '0.1.45',ext:'jar'],
        [group: 'org.yaml',name:'snakeyaml',version:'1.9']
    )
    testCompile(
        [group: 'junit', name: 'junit', version: '3.8.1',ext:'jar']
    )
}

jar {
    manifest {
        attributes 'Rundeck-Version': version, 
                   'Rundeck-Tools-Dependencies': configurations.runtime.collect { "$it.name" }.join(" ") 
    }
}

test{
    systemProperties 'rdeck.base': "$projectDir/build/rdeck_base"
    systemProperties 'rdeck.home': "$projectDir/build"
}

task expandTemplate << {
    ant.delete(file:"$projectDir/src/main/resources/META-INF/com/dtolabs/rundeck/core/application.properties")
    copy{
        expand('version':version,'version_build':buildNum,'version_ident':version+'-'+buildNum)
        from "$projectDir/src/main/meta/com/dtolabs/rundeck/core/application.properties"
        into "$projectDir/src/main/resources/META-INF/com/dtolabs/rundeck/core/"
    }   
}

compileJava.dependsOn expandTemplate

assemble {
    doLast{
        //copy libs to a tools lib dir
        ant.mkdir(dir:"$projectDir/build/tools/lib")
        configurations.runtime.files.each { file ->
            copy{
                from file
                into "$projectDir/build/tools/lib"
            }
        }
    }
}

uploadArchives {
		repositories.mavenDeployer {
			configuration = configurations.archives
            pom.project {
                artifactId archivesBaseName
                groupId "com.dtolabs.rundeck"
                inceptionYear '2011'
                packaging 'jar'
                version version
                name "RunDeck Core"
                url 'http://rundeck.org'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
    }
}

//build a pom we reuse for both maven builds and release to sonatype
def buildpom=pom {
    project {
        artifactId archivesBaseName
        groupId project.group
        inceptionYear '2011'
        packaging 'jar'
        version version
        name "Rundeck Core"
        description "Core library for the Rundeck web console for command dispatching and job scheduling"
        url 'http://rundeck.org'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        properties{
            'version'(version)
            'version_build'(buildNum)
            'version_ident'(version+'-'+buildNum)
        }
        scm {
            url 'https://github.com/dtolabs/rundeck'
            connection 'scm:git:git@github.com/dtolabs/rundeck.git'
            developerConnection 'scm:git:git@github.com:dtolabs/rundeck.git'
        }
        developers {
          developer {
            id('gschueler')
            name('Greg Schueler')
            email('greg@dtosolutions.com')
          }
        }
        parent {
            groupId('org.sonatype.oss')
            artifactId('oss-parent')
            version('7')
        }
        build {
            resources{
                resource{
                    directory 'src/main/meta'
                    targetPath 'META-INF'
                    filtering=true
                }
                resource{
                    directory 'src/main/resources'
                }
            }
            plugins{
                plugin{
                    groupId 'org.apache.maven.plugins'
                    artifactId 'maven-compiler-plugin'
                    version '2.3.2'
                    configuration{
                        'source'('1.5')
                        'target'('1.5')
                    }
                }
                plugin{
                    groupId 'org.apache.maven.plugins'
                    artifactId 'maven-surefire-plugin'
                    version '2.10'
                    configuration{
                        systemPropertyVariables{
                            'rdeck.base'('${project.build.directory}/rdeck_base')
                        }
                        redirectTestOutputToFile 'true'
                    }
                }
                plugin{
                    groupId 'org.apache.maven.plugins'
                    artifactId 'maven-jar-plugin'
                    version '2.3.2'
                    configuration{
                        archive{
                          manifestEntries{
                            'Rundeck-Version'(version)
                            'Rundeck-Tools-Dependencies'(configurations.runtime.collect { "$it.name" }.join(" "))
                          }
                        }
                    }
                }
            }
        }
    }
}

task createPom << {
    buildpom.writeTo("pom.xml")
}


// prompt for PGP key passphrase if not set
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign } && !ext.hasProperty("signing.password") && !isDevBuild) {
        // Use Java 6's console to read from the console (no good for a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"

        //def id = console.readLine("PGP Key Id: ")
        //def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
        def password = console.readPassword("PGP Private Key Password: ")

        //allprojects { ext."signing.keyId" = id }
        //allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

uploadArchives {
    if(isDevBuild){
        repositories{
            mavenLocal()
        }
    }else{
        repositories.mavenDeployer {
            if(isReleaseBuild){
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
 
            configuration = configurations.archives

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom=buildpom
        }
    }
}
