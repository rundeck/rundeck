plugins {
    id 'groovy'
    id "com.adarshr.test-logger" version "4.0.0"
}

apply from: "../gradle/java-version.gradle"

repositories {
    mavenLocal()
    mavenCentral()
}

testlogger {
    slowThreshold 10000
}

project.evaluationDependsOn(":rundeckapp")

configurations.all {
    resolutionStrategy {
        // Force safe commons-compress versions to fix CVE-2024-25710
        // Only force artifacts that exist for version 1.21
        force "org.apache.commons:commons-compress:${commonsCompressVersion}"
    }
}


dependencies {
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    testImplementation "org.testcontainers:spock:${testContainersVersion}"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}"
    testImplementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    testImplementation "org.seleniumhq.selenium:selenium-java:${seleniumJavaVersion}"
    testImplementation "com.squareup.okhttp3:okhttp-urlconnection:${okhttpUrlConnectionVersion}"
    testImplementation group: 'com.jcraft', name: 'jsch', version: "${jschVersion}"

    implementation "org.apache.commons:commons-compress:${commonsCompressVersion}"

}

//This prevents tasks from being cached
gradle.taskGraph.whenReady { taskGraph ->
    [Test].each {
        project.tasks.withType(it) {
            it.outputs.upToDateWhen { false }
        }
    }
}

def copyFile(source, destination, newFileName){
    copy {
        from source
        into destination
        rename "$source.name", newFileName
    }
}

def checkWarFile(destination, fileName) {
    def rundeckapp = project(":rundeckapp")
    /* A bit dirty but will allow building container between Travis stages without rebuilding the war */
    def warFile
    if(System.getenv("TEST_WAR_FILE_LOCATION")){
        warFile = file(System.getenv("TEST_WAR_FILE_LOCATION"))
        println "From system env File to copy from ${warFile} to ${destination + fileName}"
    }else{
        warFile = file(rundeckapp.war.archiveFile.get().toString().replace("-plain", ""))
        println "From rundeck build File to copy from ${warFile} to ${destination + fileName}"
    }
    if (!warFile.exists()) {
        throw new GradleException("War file does not exist")
    }
    copyFile(warFile, destination, fileName)
    println "File copied from ${warFile} to ${destination + fileName}"
}

/** 
 * Returns a function that includes only the test files specified in the `testFiles` parameter.
 * The `testFiles` parameter is a string of paths to the source code of the tests to be run.
 */
def explicitTestIncluder(String testFiles) {
    // Convert test file source code paths to compiled class paths.
    // Example: `functional-test/src/test/groovy/org/rundeck/tests/functional/api/basic/BasicSpec.groovy`
    // needs to become `org/rundeck/tests/functional/api/basic/BasicSpec.class`.
    def compiledFilesToTest = testFiles
        .split(System.lineSeparator())
        .collect { testFilePath -> 
            testFilePath
            .trim()
            .replaceFirst(".*\\/src\\/test\\/(groovy\\/|java\\/)", "")
            .replaceFirst("(.groovy|.java)\$", ".class")
        }

    logger.info("Compiled files to test: {}", compiledFilesToTest)

    return {
        FileTreeElement e ->
            if (e.isDirectory()) {
                return true
            }

            compiledFilesToTest.contains(e.path)
    }
}

task apiTest(type: Test){
    useJUnitPlatform()
    systemProperty('TEST_IMAGE', "rundeck/rundeck:SNAPSHOT")
    systemProperty("COMPOSE_PATH", "docker/compose/oss/docker-compose.yml")
    systemProperty('spock.configuration','spock-configs/IncludeAPITestsConfig.groovy')
    description = "Run API tests"

    if (project.hasProperty("testFiles")) {
        include(explicitTestIncluder(project.properties["testFiles"]))
    }
}

task pluginBlocklistTest(type: Test){
    useJUnitPlatform()
    systemProperty('TEST_IMAGE', "rundeck/rundeck:SNAPSHOT")
    systemProperty("COMPOSE_PATH", "docker/compose/oss/docker-compose-blocklist.yml")
    systemProperty('spock.configuration','spock-configs/IncludeBlocklistTestsConfig.groovy')
    description = "Run Plugin Blocklist tests"
}

task apiTestNewLocal(type: Test){
    useJUnitPlatform()
    def featureName='newLocalNodeExecutor'
    systemProperty("TEST_FEATURE_ENABLED_NAME", featureName)
    systemProperty('TEST_IMAGE', "rundeck/rundeck:SNAPSHOT")
    systemProperty("COMPOSE_PATH", "docker/compose/oss/docker-compose.yml")
    systemProperty('spock.configuration','spock-configs/IncludeAPIExecOutputTestsConfig.groovy')
    description = "Run Execution Output Tests (test ${featureName} feature)"
}

task apiTestNodeExecutorSecureInput(type: Test){
    useJUnitPlatform()
    def featureName='nodeExecutorSecureInput'
    systemProperty("TEST_FEATURE_ENABLED_NAME", featureName)
    systemProperty('TEST_IMAGE', "rundeck/rundeck:SNAPSHOT")
    systemProperty("COMPOSE_PATH", "docker/compose/oss/docker-compose.yml")
    systemProperty('spock.configuration','spock-configs/IncludeAPISecureInputTestsConfig.groovy')
    description = "Run Secure Input Tests (test ${featureName} feature)"
}

task seleniumCoreTest(type: Test){
    useJUnitPlatform()
    systemProperty('TEST_IMAGE', "rundeck/rundeck:SNAPSHOT")
    systemProperty("COMPOSE_PATH", "docker/compose/oss/docker-compose.yml")
    systemProperty('spock.configuration', 'spock-configs/IncludeSeleniumCoreTestsConfig.groovy')
    description = "Run Rundeck OSS Selenium Tests"

    if (project.hasProperty("testFiles")) {
        include(explicitTestIncluder(project.properties["testFiles"]))
    }
}

task alphaUiSeleniumCoreTest(type: Test){
    useJUnitPlatform()
    def featureName='alphaUi'
    systemProperty("TEST_FEATURE_ENABLED_NAME", featureName)
    systemProperty('TEST_IMAGE', "rundeck/rundeck:SNAPSHOT")
    systemProperty("COMPOSE_PATH", "docker/compose/oss/docker-compose.yml")
    systemProperty('spock.configuration', 'spock-configs/IncludeAlphaUiSeleniumCoreTestsConfig.groovy')
    description = "Run Rundeck OSS Selenium Tests with Alpha UI feature flag enabled"

    if (project.hasProperty("testFiles")) {
        include(explicitTestIncluder(project.properties["testFiles"]))
    }
}

task ldapTest(type: Test){
    useJUnitPlatform()
    systemProperty("TEST_IMAGE", "rundeck/rundeck:SNAPSHOT")
    systemProperty("COMPOSE_PATH", "docker/ldap/docker-compose.yml")
    systemProperty('spock.configuration', 'spock-configs/IncludeLdapTestsConfig.groovy')
    description = "Run Rundeck OSS LDAP Tests"
}
