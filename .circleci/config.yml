version: 2.1

parameters:
  disable-wizcli-scan:
    type: boolean
    default: true
  trigger-enterprise:
    type: boolean
    default: true

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  node: circleci/node@6.3.0
  trigger: rundeck/trigger-pipeline@0.0.5
  slack: circleci/slack@4.4.0
  browser-tools: circleci/browser-tools@1.4.8

# Slack notifier
slack-fail-post-step: &slack-fail-post-step
  post-steps:
    - slack/notify:
        channel: C01D89KV4JX
        branch_pattern: main
        event: fail
        custom: |
          {
          	"blocks": [
          		{
          			"type": "section",
          			"fields": [
          				{
          					"type": "mrkdwn",
          					"text": ":red_circle: *Job Failed*: ${CIRCLE_JOB}"
          				}
          			]
          		},
          		{
          			"type": "context",
          			"elements": [
          				{
          					"type": "mrkdwn",
          					"text": "*Project*: $CIRCLE_PROJECT_REPONAME"
          				},
          				{
          					"type": "mrkdwn",
          					"text": "*Branch*: $CIRCLE_BRANCH"
          				},
          				{
          					"type": "mrkdwn",
          					"text": "*Author*: $CIRCLE_USERNAME"
          				}
          			]
          		},
          		{
          			"type": "actions",
          			"elements": [
          				{
          					"type": "button",
          					"text": {
          						"type": "plain_text",
          						"text": "View Job"
          					},
          					"url": "${CIRCLE_BUILD_URL}"
          				}
          			]
          		}
          	]
          }


#### Executors ####

executors:

  # Main docker executor
  docker-builder:
    docker:
      - image: cimg/base:current-22.04
    parameters:
      # we set the resource class to small by default
      # however, any job that uses the setup_remote_docker step will be
      # automatically upgraded to medium.
      resource_class:
        type: string
        default: small
    resource_class: << parameters.resource_class >>


  # Machine executor
  machine-builder:
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: << parameters.docker_layer_caching >>
    parameters:
      resource_class:
        type: string
        default: medium
      # TIP: Circle layer caching is only useful for jobs that build images.
      docker_layer_caching:
        type: boolean
        default: false
    resource_class: << parameters.resource_class >>


#### Commands ####

commands:

  # Setup docker remote for usage in builds
  setup_docker:
    parameters:
      # TIP: Circle layer caching is only useful for jobs that build images.
      docker_layer_caching:
        type: boolean
        default: false
    steps:
      - setup_remote_docker:
          docker_layer_caching: << parameters.docker_layer_caching >>

      # Due to circleci cli limitations, we need this workaround in order to run
      # the docker command as root on local builds, without running everything as root.
      # This step is NOT needed for normal operation.
      - run:
          name: Check if build is running locally
          command: |
            if [[ $CIRCLE_SHELL_ENV == *"localbuild"* && $CIRCLE_LOCAL_BUILD == "true" ]]; then
              echo "  !!!  Local build detected, setting up docker as root  !!!"
              sudo chmod u+s $(which docker)
            fi


  # Executes the env setup script and runs the specified commands
  run-build-step:
    description: "Runs a build command with full build environment"
    parameters:
      step-name:
        type: string
      command:
        type: string
      when:
        type: string
        default: on_success
    steps:
      - run:
          name: << parameters.step-name >>
          when: << parameters.when >>
          command: |
            source scripts/circleci/setup.sh
            echo "=== ENV ===" && env && echo "=== ENV END $(date)==="
            set -x            
            <<parameters.command>>
            echo "=== Finished $(date) ==="

  # Save gradle test results
  collect-gradle-tests:
    description: Collect JUNIT test reports from entire project
    steps:
      - run-build-step:
          step-name: Save test results
          when: always
          command: collect_gradle_tests
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  # Restore Gradle Cache
  restore-build-cache:
    description: Restore Build cache
    steps:
      - restore_cache:
          keys:
            - cache-{{ .Environment.BUILD_CACHE_VERSION }}-build-cache-{{ .Branch }}-<<pipeline.number>>
            - cache-{{ .Environment.BUILD_CACHE_VERSION }}-build-cache-{{ .Branch }}-
            - cache-{{ .Environment.BUILD_CACHE_VERSION }}-build-cache-

  #Save gradle cache
  save-build-cache:
    description: Save Build cache
    steps:
      - save_cache:
          paths:
            - ~/.gradle/wrapper
            - ~/.gradle/caches
            - ~/.npm/_cacache
          key: cache-{{ .Environment.BUILD_CACHE_VERSION }}-build-cache-{{ .Branch }}-<<pipeline.number>>

  ## Deps Installers quick references.
  # Install node
  install-node:
    description: Install Node
    steps:
      - node/install:
          use-nvm-cache: true
          nvm-cache-key: cache-{{ .Environment.BUILD_CACHE_VERSION }}-nvm-{{ checksum ".nvmrc" }}

  # Install Java JDK
  install-java-jdk:
    description: Install JDK
    steps:
      - run-build-step:
          step-name: Install Java JDK
          command: dependencies_install_zulu11jdk

  ## Dependency groups

  # Install base dependencies
  install-base-dependencies:
    description: Install Build Dependencies
    steps:
      - install-java-jdk

  # Install dependencies required for building
  install-build-dependencies:
    description: Install Build Dependencies
    steps:
      - install-base-dependencies
      - install-node

  # Install dependencies required for packaging
  install-packaging-dependencies:
    description: Install Packaging Dependencies
    steps:
      - install-base-dependencies
      - aws-cli/install
      - run-build-step:
          step-name: Install Packaging Dependencies
          command: dependencies_packaging_setup

  # Install dependencies required for runnning testdeck
  install-testdeck-dependencies:
    description: Install TestDeck Dependencies
    steps:
      - install-base-dependencies
      - run-build-step:
          step-name: Install TestDeck Dependencies
          command: dependencies_testdeck_setup


#### Job Definitions ####

# Default job config
job-defaults: &job-defaults
  # Using an absolute path here prevents issues with bash interpolations.
  working_directory: /home/circleci/workspace
  environment:
    CIRCLE_PIPELINE_NUM: << pipeline.number >>
    GRADLE_OPTS: -XX:MaxRAMPercentage=80.0
    JAVA_OPTS: -XX:MaxRAMPercentage=80.0
    JAVA_HOME: /usr/lib/jvm/zulu11

jobs:

  # Build rundeck War
  build-rundeck:
    <<: *job-defaults
    executor:
      name: docker-builder
      resource_class: large
    steps:
      - setup_docker:
          docker_layer_caching: true
      - checkout
      - restore-build-cache
      - install-build-dependencies
      - run-build-step:
          step-name: Build War
          command: rundeck_war_build
      - run-build-step:
          step-name: Build And Push Docker Images
          command: |
            rundeck_docker_build
            rundeck_docker_push
      - run-build-step:
          step-name: Verify Build
          command: rundeck_verify_build
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - core/build
            - rundeckapp/build
            - plugins/*/build
            - rundeck-*/build
            - grails-*/build
            - rundeck-storage/rundeck-*/build
            - rundeck-authz/rundeck-*/build
      - run-build-step:
          step-name: Collect Artifacts
          command: collect_build_artifacts
      - store_artifacts:
          path: artifacts
      - save-build-cache


  # Run Gradle Tests
  test-gradle:
    <<: *job-defaults
    executor:
      name: docker-builder
    steps:
      - setup_docker
      - checkout
      - install-build-dependencies
      - restore-build-cache
      - attach_workspace:
          at: ~/workspace
      - run-build-step:
          step-name: Run Gradle Tests
          command: rundeck_gradle_tests
      - collect-gradle-tests
      - save-build-cache

  # WizCLI Image Scan
  wizcli-scan:
    <<: *job-defaults
    executor:
      name: docker-builder
    parameters:
      continue:
        description: Continue successfully even if check fails
        type: boolean
        default: false
    steps:
      - setup_docker
      - checkout
      - run-build-step:
          step-name: Install WizCLI
          command: wizcli_install
      - run-build-step:
          step-name: Scan Image
          command: wizcli_scan || << parameters.continue >>
      - store_artifacts:
          path: ~/workspace/wizcli_scan_result.json
      - store_artifacts:
          path: ~/workspace/wizcli.log
      - store_test_results:
          path: test-results

  #Openapi tests
  test-openapi:
    <<: *job-defaults
    executor:
      name: docker-builder
    steps:
      - checkout
      - install-build-dependencies
      - attach_workspace:
          at: ~/workspace
      - run-build-step:
          step-name: Run Redocly OpenAPI Linting
          command: openapi_tests

  # Trigger pipeline in the enterprise repo
  trigger-enterprise:
    executor:
      name: docker-builder
    steps:
      - run: echo "Trigger enterprise pipeline is << pipeline.parameters.trigger-enterprise >>"
      - when:
          condition: << pipeline.parameters.trigger-enterprise >>
          steps:
            - trigger/trigger:
                debug: true
                branch: ${CIRCLE_BRANCH}
                token: '${CIRCLECI_API_TOKEN}'
                project-slug: 'gh/rundeckpro/rundeckpro'
                pipeline-number: '<<pipeline.number>>'

  # Publish Docker Images
  docker-publish:
    <<: *job-defaults
    executor:
      name: docker-builder

    steps:
      - setup_docker
      - checkout
      - install-base-dependencies
      - restore-build-cache
      - attach_workspace:
          at: ~/workspace
      - run-build-step:
          step-name: Build Docker Images
          command: rundeck_docker_build
      - run-build-step:
          step-name: Publish Docker Images
          command: rundeck_docker_publish

  # Publish Maven Packages to sonatype
  maven-publish:
    <<: *job-defaults
    executor:
      name: docker-builder

    steps:
      - setup_docker
      - checkout
      - install-packaging-dependencies
      - restore-build-cache
      - attach_workspace:
          at: ~/workspace
      - run-build-step:
          step-name: Publish to Sonatype
          command: packaging_publish_maven

  # Publish all packages to packagecloud
  packaging-publish:
    <<: *job-defaults
    executor:
      name: docker-builder

    steps:
      - setup_docker
      - checkout
      - install-packaging-dependencies
      - restore-build-cache
      - attach_workspace:
          at: ~/workspace
      - run-build-step:
          step-name: Install & Setup
          command: packaging_setup
      - run-build-step:
          step-name: Install PackageCloud CLI
          command: install_package_cloud
      - run-build-step:
          step-name: Create Packages
          command: packaging_create_packages
      - run-build-step:
          step-name: Sign Packages
          command: packaging_sign
      - run-build-step:
          step-name: T Packages
          command: packaging_test_packages
      - run-build-step:
          step-name: Publish Packages
          command: packaging_publish
      - run-build-step:
          step-name: Publish war
          command: packaging_publish_war
      - save-build-cache

  # Test packaging
  packaging-test:
    <<: *job-defaults
    executor:
      name: docker-builder

    steps:
      - setup_docker
      - checkout
      - install-packaging-dependencies
      - restore-build-cache
      - attach_workspace:
          at: ~/workspace
      - run-build-step:
          step-name: Install PackageCloud CLI
          command: install_package_cloud
      - run-build-step:
          step-name: Install & Setup
          command: packaging_setup
      - run-build-step:
          step-name: Create Packages
          command: packaging_create_packages
      - run-build-step:
          step-name: Sign Packages
          command: packaging_sign
      - run-build-step:
          step-name: T Packages
          command: packaging_test_packages
      - save-build-cache
      - store_artifacts:
          path: ~/workspace/packaging/packaging/build/distributions



  # Run Testdeck job on docker executor.
  test-docker:
    <<: *job-defaults
    executor:
      name: docker-builder

    parameters:
      command:
        description: Command that will execute the docker tests
        type: string
    steps:
      - setup_docker
      - checkout
      - install-testdeck-dependencies
      - attach_workspace:
          at: ~/workspace
      - run-build-step:
          step-name: Build test images
          command: testdeck_build_rdtest
      - run-build-step:
          step-name: Run Test
          command: << parameters.command >>


  test-machine:
    <<: *job-defaults
    executor:
      name: machine-builder
      docker_layer_caching: true
      resource_class: << parameters.resource_class >>

    parameters:
      resource_class:
        type: string
        default: medium
      command:
        description: Command that will execute the docker tests
        type: string
    steps:

      - checkout
      - install-testdeck-dependencies
      - attach_workspace:
          at: ~/workspace
      - run-build-step:
          step-name: Build test images
          command: testdeck_build_rdtest
      - run-build-step:
          step-name: Run Test
          command: << parameters.command >>


  test-gradle-functional:
    <<: *job-defaults
    parallelism: << parameters.parallelism >>
    executor:
      name: machine-builder
      docker_layer_caching: true
      resource_class: << parameters.resource_class >>
    parameters:
      test-image:
        description: Test image tag
        default: "rundeck/testdeck"
        type: string
      gradle-task:
        type: string
      parallelism:
        type: integer
        default: 1
      resource_class:
        type: string
        default: medium
      test_file_pattern:
        type: string
    steps:
      - checkout
      - restore-build-cache
      - install-base-dependencies
      - attach_workspace:
          at: ~/workspace
      - run-build-step:
          step-name: Pull images
          command: rundeck_pull_image
      - run-build-step:
          step-name: Runs gradle test task << parameters.gradle-task >>
          command: |
            TEST_FILES=$(circleci tests glob "<< parameters.test_file_pattern >>" | circleci tests split)
            echo $TEST_FILES | tee test_file_listing.txt
            TEST_IMAGE=<< parameters.test-image >>
            GRADLE_TASK=<< parameters.gradle-task >>
            rundeck_gradle_functional_tests
      - collect-gradle-tests
      - store_artifacts:
          path: ~/workspace/functional-test/build/test-results/images
      - store_artifacts:
          path: test_file_listing.txt



#### WORKFLOWS ####

slack-defaults: &slack-defaults
  context:
    - slack-secrets
  <<: *slack-fail-post-step

require-build: &require-build
  requires:
    - Build

filters:
  all: &filter-default
    filters:
      tags: {only: '/^v.*/'}
  ignore-tags: &filter-no-tags
    filters:
      tags: {ignore: '/^v.*/'}

  tags: &filter-tags
    filters:
      branches: {ignore: /.*/}
      tags: {only: '/^v.*/'}

workflows:

  build_and_publish:
    when:
      matches: { pattern: "/^v.*$/", value: <<pipeline.git.tag>> }

    jobs:
      - build-rundeck:
          name: Build Release
          <<: *slack-defaults
          <<: *filter-tags
      - packaging-publish:
          name: Package and Release
          requires:
            - Build Release
          <<: *slack-defaults
          <<: *filter-tags
      - maven-publish:
          name: Maven Publish
          requires:
            - Build Release
          <<: *slack-defaults
          <<: *filter-tags
      - docker-publish:
          name: Docker Publish
          requires:
            - Build Release
          <<: *slack-defaults
          <<: *filter-tags


  build_and_test:
    when:
      and:
        - << pipeline.git.branch >>
        - not:
            matches:
              pattern: /^pull\/[0-9]+$/
              value: << pipeline.git.branch >>

    jobs:
      - build-rundeck:
          name: Build
          <<: *slack-defaults
      - test-gradle:
          name: T Unit Gradle
          <<: *slack-defaults
      - trigger-enterprise:
          name: Enterprise Snapshot
          <<: *require-build
          filters:
            branches: { only: main }
      - test-openapi:
          name: OpenAPI Spec Validation
          <<: *require-build
          <<: *slack-defaults
      - packaging-test:
          name: T Packaging
          <<: *require-build
          <<: *slack-defaults
      - wizcli-scan:
          name: WizCLI Scan Preview
          <<: *require-build
          continue: true
          context:
            - WizCLI
          filters:
            branches: { ignore: main }
      - wizcli-scan:
          name: WizCLI Scan
          continue: << pipeline.parameters.disable-wizcli-scan >>
          context:
            - WizCLI
            - slack-secrets
          filters:
            branches: { only: main }
          <<: *require-build
          <<: *slack-fail-post-step
      - test-docker:
          name: T Docker
          command: bash test/run-docker-tests.sh
          <<: *require-build
          <<: *slack-defaults
      - test-docker:
          name: T Integration SSL
          command: bash test/run-docker-ssl-tests.sh
          <<: *require-build
          <<: *slack-defaults
      - test-docker:
          name: T Integration Ansible
          command: bash test/run-docker-ansible-tests.sh
          <<: *require-build
          <<: *slack-defaults
      - test-machine:
          name: T Integration LDAP
          command: bash test/run-docker-ldap-tests.sh
          <<: *require-build
          <<: *slack-defaults
      - test-machine:
          name: T Integration LDAP Bind
          command: DOCKER_COMPOSE_SPEC=docker-compose-ldap-binding-test.yaml bash test/run-docker-ldap-tests.sh
          <<: *require-build
          <<: *slack-defaults
      - test-docker:
          name: T Integration PAM
          command: bash test/run-docker-pam-tests.sh
          <<: *require-build
          <<: *slack-defaults
      - test-gradle-functional:
          name: T Selenium
          gradle-task: seleniumCoreTest
          parallelism: 3
          test_file_pattern: "functional-test/src/test/groovy/org/rundeck/tests/functional/selenium/**/*{.groovy,.java}"
          <<: *require-build
          <<: *slack-defaults
      - test-gradle-functional:
          name: T Functional API
          gradle-task: apiTest
          test_file_pattern: "functional-test/src/test/groovy/org/rundeck/tests/functional/api/**/*{.groovy,.java}"
          parallelism: 3
          <<: *require-build
          <<: *slack-defaults
      - test-gradle-functional:
          name: T Functional Plugin Blocklist
          gradle-task: pluginBlocklistTest
          test_file_pattern: "functional-test/src/test/groovy/org/rundeck/tests/functional/integration/**/*{.groovy,.java}"
          <<: *require-build
          <<: *slack-defaults
      - test-gradle-functional:
          name: T Feature NewLocalExec
          gradle-task: apiTestNewLocal
          test_file_pattern: "functional-test/src/test/groovy/org/rundeck/tests/functional/api/execution/ExecutionOutputSpec.groovy"
          <<: *require-build
          <<: *slack-defaults
      - test-gradle-functional:
          name: T Feature NodeExecutorSecureInput
          gradle-task: apiTestNodeExecutorSecureInput
          test_file_pattern: "functional-test/src/test/groovy/org/rundeck/tests/functional/api/job/input/*.groovy"
          <<: *require-build
          <<: *slack-defaults
      - test-gradle-functional:
          name: T Selenium Alpha UI
          gradle-task: alphaUiSeleniumCoreTest
          test_file_pattern: "functional-test/src/test/groovy/org/rundeck/tests/functional/selenium/alphaUi/**/*{.groovy,.java}"
          <<: *require-build
          <<: *slack-defaults
