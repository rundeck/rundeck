#
# Copyright 2016 SimplifyOps, Inc. (http://simplifyops.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
plugin.title=Git Import
plugin.description=Import Jobs from a Git Repository\n\
\n\
[Git Logo](https://git-scm.com/downloads/logos) by [Jason Long](http://twitter.com/jasonlong) is licensed under the [CC BY 3.0](http://creativecommons.org/licenses/by/3.0/).

setup.property.dir.title=Base Directory
setup.property.dir.description=Directory for checkout
setup.property.pathTemplate.title=File Path Template
setup.property.pathTemplate.description=Path template for storing a Job to a file within the base dir.\n\
        \n\
Available expansion patterns:\n\
        \n\
* `${job.name}` - the job name\n\
* `${job.group}` - blank, or `path/`\n\
* `${job.project}` - project name\n\
* `${job.id}` - job UUID\n\
* `${job.sourceId}` - Original Job UUID from imported source (see *Strip Job UUID*) if available, or newly generated UUID\n\
* `${config.format}` - Serialization format chosen below.\n\
\n\
If you set `Export UUID Behavior` to `preserve`, then you most likely do not want to include `${job.id}` \
  in the File Path Template,\n\
otherwise if you set it to `original`, you should use `${job.sourceId}`.  If set to `remove` you should \
  not include the ID in the path template.

setup.property.importUuidBehavior.title=Import UUID Behavior
setup.property.importUuidBehavior.description=How to handle UUIDs from imported Job source files\n\
\n\
* `preserve` - Preserve the Source UUID as the Job UUID\n\
* `archive` - Remove the Source UUID but keep it for use in Export. Allows you to use `${job.sourceId}` \
  in the "File Path Template" instead of `${job.id}`.\n\
* `remove` - Remove the source UUID

setup.property.url.title=Git URL
setup.property.url.description=Checkout url.\n\
\n\
See [git-clone](https://www.kernel.org/pub/software/scm/git/docs/git-clone.html)\n\
specifically the [GIT URLS](https://www.kernel.org/pub/software/scm/git/docs/git-clone.html#URLS) section.\n\
\n\
Some examples:\n\
\n\
* `ssh://[user@]host.xz[:port]/path/to/repo.git/`\n\
* `git://host.xz[:port]/path/to/repo.git/`\n\
* `http[s]://host.xz[:port]/path/to/repo.git/`\n\
* `ftp[s]://host.xz[:port]/path/to/repo.git/`\n\
* `rsync://host.xz/path/to/repo.git/`
setup.property.branch.title=Branch
setup.property.branch.description=Checkout branch
setup.property.strictHostKeyChecking.title=SSH: Strict Host Key Checking
setup.property.strictHostKeyChecking.description=Use strict host key checking.\n\
\n\
If `yes`, require remote host SSH key is defined in the `~/.ssh/known_hosts` file, otherwise do not verify.
setup.property.sshPrivateKeyPath.title=SSH Key Storage Path
setup.property.sshPrivateKeyPath.description=Path can include variable references\n\
\n\
* `${user.login}` login name of logged in user\n\
* `${project}` current project name
setup.property.gitPasswordPath.title=Password Storage Path
setup.property.gitPasswordPath.description=Password to authenticate remotely (e.g. for SSH or HTTPS URLs).\n\
\n\
Path can include variable references\n\
\n\
* `${user.login}` login name of logged in user\n\
* `${project}` current project name
setup.property.format.title=Format
setup.property.format.description=Format for serializing Job definitions
setup.property.fetchAutomatically.title=Fetch Automatically
setup.property.fetchAutomatically.description=Automatically fetch remote changes for local comparison. If false, you can perform it manually

action.initialize-tracking.title=Setup Tracking
action.initialize-tracking.description=Choose to select a static list of Files found in the Repository to be tracked for Job Import.\n
\n
Note: New files added to the repo *will not* be available for Job Import, and only those selected\n
files will be watched for changes.
action.initialize-tracking.buttonTitle=Setup
action.initialize-tracking.property.useFilePattern.title=Match a Regular Expression?
action.initialize-tracking.property.useFilePattern.description=Check to match all paths that match the regular expression.
action.initialize-tracking.property.filePattern.title=Regular Expression
action.initialize-tracking.property.filePattern.description=Enter a regular expression. New paths in the repo matching this expression will also be imported.

action.import-all.title=Import Remote Changes
action.import-all.description=Import the modifications to Rundeck
action.import-all.buttonTitle=Import
action.import-jobs.title=Import Remote Changes
action.import-jobs.description=Import the modifications to Rundeck
action.import-jobs.buttonTitle=Import

action.remote-pull.title=Pull Remote Changes
action.remote-pull.description=Synch incoming changes from Remote
action.remote-pull.buttonTitle=Synch/Pull Changes
action.remote-pull.property.status.title=Status
action.remote-pull.property.refresh.title=Synch Method
action.remote-pull.property.refresh.description=Choose a method to synch the remote branch changes with local git repository.\n\
\n\
* `merge` - merge remote changes into local changes\n\
* `rebase` - rebase local changes on top of remote
action.remote-pull.property.resolution.title=Conflict Resolution Strategy
action.remote-pull.property.resolution.description=Choose a strategy to resolve conflicts in the synched files.\n\
\n\
* `ours` - apply our changes over theirs\n\
* `theirs` - apply their changes over ours

action.remote-fetch.title=Fetch Remote Changes
action.remote-fetch.description=Fetch changes from Remote for local comparison
action.remote-fetch.buttonTitle=Fetch
action.remote-fetch.property.status.title=Git Status


